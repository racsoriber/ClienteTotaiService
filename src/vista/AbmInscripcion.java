/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AbmInscripcion.java
 *
 * Created on 20-08-2011, 11:39:02 AM
 */
package vista;

import incsripcion.ServicioAbmInscripcion;
import incsripcion.ServicioAbmInscripcion_Service;
import java.awt.Component;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.text.MaskFormatter;
import javax.xml.bind.annotation.XmlAccessOrder;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 *
 * @author timoteo
 */
public class AbmInscripcion extends javax.swing.JPanel {

    /** Creates new form AbmInscripcion */
    private ModeloTabla modeloInscripcion = new ModeloTabla(new String[]{"Edicion", "Alumno", "FechaInscripcion", "Nota"});
    private ServicioAbmInscripcion controlInscripcion = new ServicioAbmInscripcion_Service().getServicioAbmInscripcionPort();

    public AbmInscripcion() {
        initComponents();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        paneEdicion = new javax.swing.JPanel();
        comboEdicion = new javax.swing.JComboBox();
        comboAlumnos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNota = new javax.swing.JFormattedTextField();
        try {
            MaskFormatter formatter = new MaskFormatter("###");
            this.txtNota = new JFormattedTextField(formatter);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInscripciones = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnNueva = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        jLabel1.setText("Edicion:");

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

        paneEdicion.setBorder(javax.swing.BorderFactory.createTitledBorder("Campos"));

        comboEdicion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboAlumnos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboAlumnos.setEnabled(false);

        jLabel2.setText("Alumno:");

        jLabel3.setText("Nota:");

        txtNota.setText("0");

        jButton1.setText("Filtrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Edicion:");

        javax.swing.GroupLayout paneEdicionLayout = new javax.swing.GroupLayout(paneEdicion);
        paneEdicion.setLayout(paneEdicionLayout);
        paneEdicionLayout.setHorizontalGroup(
            paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneEdicionLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNota)
                    .addComponent(comboAlumnos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboEdicion, 0, 242, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        paneEdicionLayout.setVerticalGroup(
            paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneEdicionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(comboEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablaInscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaInscripciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInscripcionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInscripciones);

        btnNueva.setText("Nuevo");
        btnNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaActionPerformed(evt);
            }
        });
        jPanel1.add(btnNueva);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar);

        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar);

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneEdicion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaActionPerformed
        nuevo();
    }//GEN-LAST:event_btnNuevaActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        addInscripcion();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tablaInscripcionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInscripcionesMouseClicked
        selectInscripcion();
    }//GEN-LAST:event_tablaInscripcionesMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        delInscripcion();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selectEdicion();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNueva;
    private javax.swing.JComboBox comboAlumnos;
    private javax.swing.JComboBox comboEdicion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel paneEdicion;
    private javax.swing.JTable tablaInscripciones;
    private javax.swing.JFormattedTextField txtNota;
    // End of variables declaration//GEN-END:variables

    private void addInscripcion() {

        String edicion = comboEdicion.getSelectedItem().toString();
        Object[] alumno = (Object[]) comboAlumnos.getSelectedItem();
        Integer alumnoId = Integer.parseInt(alumno[0].toString());
        try {
            GregorianCalendar cal = new GregorianCalendar();
            cal.setTime(new Date());
            XMLGregorianCalendar date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(cal);
            String resultado = controlInscripcion.addInscripcion(edicion, alumnoId, date2, 0);
            comboEdicion.setSelectedItem("");
            comboAlumnos.setEnabled(false);
            JOptionPane.showMessageDialog(this, resultado);
        } catch (Exception e) {
        }
        cargarDatos();        
    }

    private void loadEdiciones() {
//        this.comboEdicion.removeAllItems();
//        ControlEdicion controlEdicion = new ControlEdicion();
//
//        List<Object[]> ediciones = controlEdicion.getEdiciones();
//        this.comboEdicion.addItem("");
//        for (Object[] item : ediciones) {
//            this.comboEdicion.addItem(item[0]);
//        }
    }
// Carga los alumnos no inscritos en una deteminada edcion

    private void loadAlumnosNoIscritos(String edicion) {
//        this.comboAlumnos.removeAllItems();
//        List<Object[]> alumNoInscritos = controlInscripcion.getNoInscritos(edicion);
//        for (Object[] item : alumNoInscritos) {
//            this.comboAlumnos.addItem(item);
//        }
    }

    private void init() {
        this.comboAlumnos.setRenderer(new AlumnoRenderer());
        this.comboAlumnos.removeAllItems();
        this.tablaInscripciones.setModel(modeloInscripcion);
        loadEdiciones();
        cargarDatos();
    }

    private void selectEdicion() {
        Object edicion = comboEdicion.getSelectedItem();
        if (edicion != null) {
            cargarDatos();
            comboAlumnos.setEnabled(true);
        }
    }

    private void cargarDatos() {
//        String edicion = comboEdicion.getSelectedItem() + "";
//        this.modeloInscripcion.setDatos(controlInscripcion.getInscripciones(edicion));
//        loadAlumnosNoIscritos(edicion);
    }

    private void nuevo() {
        enableModificar(false);
        comboEdicion.setSelectedItem("");
        comboAlumnos.setEnabled(false);
    }

    private void enableModificar(boolean enable) {
        this.btnAgregar.setEnabled(!enable);
        this.btnModificar.setEnabled(enable);
        this.btnEliminar.setEnabled(enable);
    }

    private void selectInscripcion() {
        int index = tablaInscripciones.getSelectedRow();
        if (index > -1) {
            enableModificar(true);
            Object[] inscripcion = modeloInscripcion.getRow(index);
            this.comboEdicion.setSelectedItem(inscripcion[0]);
            selectAlumno((Integer) inscripcion[1]);
            this.txtNota.setValue(inscripcion[3].toString());
        }
    }

    private void selectAlumno(Integer idAlumno) {
        for (int i = 0; i < comboAlumnos.getItemCount(); i++) {
            Object[] alumno = (Object[]) comboAlumnos.getItemAt(i);
            if (idAlumno.toString().equals(alumno[0].toString())) {
                this.comboAlumnos.setSelectedIndex(i);
                break;
            }
        }
    }

    private void modificar() {
//        String edicion = comboEdicion.getSelectedItem().toString();
//        Object[] alumno = (Object[]) comboAlumnos.getSelectedItem();
//        Integer alumnoId = Integer.parseInt(alumno[0].toString());
//        Integer nota = Integer.parseInt(txtNota.getText().trim());
//        String resultado = controlInscripcion.modificarInscripcion(edicion, alumnoId, nota);
//        comboEdicion.setSelectedItem("");
//        comboAlumnos.setEnabled(false);
//        cargarDatos();
//        JOptionPane.showMessageDialog(this, resultado);
    }

    private void delInscripcion() {
//        String edicion = comboEdicion.getSelectedItem().toString();
//        Object[] alumno = (Object[]) comboAlumnos.getSelectedItem();
//        Integer alumnoId = Integer.parseInt(alumno[0].toString());
//        String resultado = controlInscripcion.delInscripcion(edicion, alumnoId);
//        comboEdicion.setSelectedItem("");
//        comboAlumnos.setEnabled(false);
//        cargarDatos();
//        JOptionPane.showMessageDialog(this, resultado);
    }

    private class AlumnoRenderer extends JLabel implements ListCellRenderer {

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value != null && value instanceof Object[]) {
                Object[] alumno = (Object[]) value;
                this.setText(alumno[0] + " - " + alumno[1]);
            }
            return this;
        }
    }
}
